<?php

/*
 * @Descripttion: 
 * @Author: czm
 * @Date: 2020-04-02 11:36:33
 */

// 面对的问题
// 一个是散列函数（或者哈希函数），一个是散列冲突（或者哈希冲突）。


// 特点
// 散列函数计算得到的散列值是非负整数
// 如果 key1 == key2，则 hash(key1) == hash(key2)
// 如果 key1 != key2，则 hash(key1) != hash(key2)

//效率
// 散列函数设计与散列冲突处理 在不考虑哈希冲突的情况下，散列表查找、删除、插入的时间复杂度都是 O(1)，非常高效。

//散列函数的构造方法
// 直接定址法：即 f(key) = a*key + b，f 表示散列函数，a、b 是常量，key 是键值
// 数字分析法：即对数字做左移、右移、反转等操作获取散列值
// 除数留余法：即 f(key) = key % p，p 表示容器数量，这种方式通常用在将数据存放到指定容器中，如何决定哪个数据放到哪个容器，比如分表后插入数据如何处理（此时 p 表示拆分后数据表的数量），分布式 Redis 如何存放数据（此时 p 表示几台 Redis 服务器）
// 随机数法：即 f(key) = random(key)，比如负载均衡的 random 机制

//散列冲突处理
//开放寻址法
// 再散列函数法
// 链地址法