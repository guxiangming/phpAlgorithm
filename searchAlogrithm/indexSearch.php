<?php
    //二分查找不适用于高速增长的海量数据
    //稠密索引、分块索引和倒排索引

    //先决条件
    // 块内无序。即每一块内的记录不要求有序。当然，有序更理想，只不过要花费大量时间和空间的代价。
    // 块间有序。即要求后一块的所有关键字都大于前一块的所有关键字。只有块间有序，才能给查找带来效率。

    // 分块索引的索引项包含三个数据项
    // 最大关键码：它存储每一块中的最大关键字。这样做的好处是在它之后的下一块中最小的关键字也能比这一块最大的关键字要大。

    // 块长：存储块中的记录个数，以便于循环时使用。

    // 块首指针：用于指向块首数据元素的指针，便于开始对这一块的记录开始遍历。

    // 在分块索引表中查找要查找关键字所在的块。由于块间有序，所以可以通过二分查找快速定位（通过不小于给定值的第一个元素，不大于给定值的最后一个元素确定区间，以前面给出的示例图为例，58位于57和96之间，则会去第三块中查找）。
    // 根据块首指针找到相应的块，并在块中顺序查找指定值（即关键码，块中无序所以只能顺序查找）。
    // 倒排指的是根据关键字去索引 ID 

    //hash algorithm
    //单向 不可逆
    //输入数据非常敏感
    //散列冲突概率小
    //算法执行要快速

    //应用场景
    //安全加密
    //唯一标识
    //数据校验
    //散列函数
    //负载均衡
    //分布式缓存
